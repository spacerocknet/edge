//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
Fact = module.exports.Fact = function(args) {
  this.mid = null;
  this.property = null;
  if (args) {
    if (args.mid !== undefined) {
      this.mid = args.mid;
    }
    if (args.property !== undefined) {
      this.property = args.property;
    }
  }
};
Fact.prototype = {};
Fact.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Fact.prototype.write = function(output) {
  output.writeStructBegin('Fact');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 2);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Film = module.exports.Film = function(args) {
  this.title = null;
  this.imageUrl = null;
  this.mid = null;
  if (args) {
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.imageUrl !== undefined) {
      this.imageUrl = args.imageUrl;
    }
    if (args.mid !== undefined) {
      this.mid = args.mid;
    }
  }
};
Film.prototype = {};
Film.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Film.prototype.write = function(output) {
  output.writeStructBegin('Film');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.imageUrl !== null && this.imageUrl !== undefined) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 2);
    output.writeString(this.imageUrl);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 3);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Question = module.exports.Question = function(args) {
  this.question = null;
  this.answers = null;
  this.correctAnswer = null;
  this.facts = null;
  if (args) {
    if (args.question !== undefined) {
      this.question = args.question;
    }
    if (args.answers !== undefined) {
      this.answers = args.answers;
    }
    if (args.correctAnswer !== undefined) {
      this.correctAnswer = args.correctAnswer;
    }
    if (args.facts !== undefined) {
      this.facts = args.facts;
    }
  }
};
Question.prototype = {};
Question.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.question = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.answers = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.answers.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.correctAnswer = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.facts = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new ttypes.Fact();
          elem13.read(input);
          this.facts.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Question.prototype.write = function(output) {
  output.writeStructBegin('Question');
  if (this.question !== null && this.question !== undefined) {
    output.writeFieldBegin('question', Thrift.Type.STRING, 1);
    output.writeString(this.question);
    output.writeFieldEnd();
  }
  if (this.answers !== null && this.answers !== undefined) {
    output.writeFieldBegin('answers', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.answers.length);
    for (var iter14 in this.answers)
    {
      if (this.answers.hasOwnProperty(iter14))
      {
        iter14 = this.answers[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.correctAnswer !== null && this.correctAnswer !== undefined) {
    output.writeFieldBegin('correctAnswer', Thrift.Type.I16, 3);
    output.writeI16(this.correctAnswer);
    output.writeFieldEnd();
  }
  if (this.facts !== null && this.facts !== undefined) {
    output.writeFieldBegin('facts', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.facts.length);
    for (var iter15 in this.facts)
    {
      if (this.facts.hasOwnProperty(iter15))
      {
        iter15 = this.facts[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidOperation = module.exports.InvalidOperation = function(args) {
  Thrift.TException.call(this, "InvalidOperation")
  this.name = "InvalidOperation"
  this.errorId = null;
  this.reason = null;
  if (args) {
    if (args.errorId !== undefined) {
      this.errorId = args.errorId;
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
  }
};
Thrift.inherits(InvalidOperation, Thrift.TException);
InvalidOperation.prototype.name = 'InvalidOperation';
InvalidOperation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.errorId = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidOperation.prototype.write = function(output) {
  output.writeStructBegin('InvalidOperation');
  if (this.errorId !== null && this.errorId !== undefined) {
    output.writeFieldBegin('errorId', Thrift.Type.I16, 1);
    output.writeI16(this.errorId);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

