//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./kucoo_types');
//HELPER FUNCTIONS AND STRUCTURES

QGen_getPopularFilms_args = function(args) {
  this.level = null;
  if (args) {
    if (args.level !== undefined) {
      this.level = args.level;
    }
  }
};
QGen_getPopularFilms_args.prototype = {};
QGen_getPopularFilms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.level = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QGen_getPopularFilms_args.prototype.write = function(output) {
  output.writeStructBegin('QGen_getPopularFilms_args');
  if (this.level !== null && this.level !== undefined) {
    output.writeFieldBegin('level', Thrift.Type.STRING, 1);
    output.writeString(this.level);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QGen_getPopularFilms_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
QGen_getPopularFilms_result.prototype = {};
QGen_getPopularFilms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.Film();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QGen_getPopularFilms_result.prototype.write = function(output) {
  output.writeStructBegin('QGen_getPopularFilms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QGen_getQuestions_args = function(args) {
  this.n = null;
  this.films = null;
  this.excludedSet = null;
  if (args) {
    if (args.n !== undefined) {
      this.n = args.n;
    }
    if (args.films !== undefined) {
      this.films = args.films;
    }
    if (args.excludedSet !== undefined) {
      this.excludedSet = args.excludedSet;
    }
  }
};
QGen_getQuestions_args.prototype = {};
QGen_getQuestions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.n = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.films = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.Film();
          elem30.read(input);
          this.films.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.SET) {
        var _size31 = 0;
        var _rtmp335;
        this.excludedSet = [];
        var _etype34 = 0;
        _rtmp335 = input.readSetBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = input.readString();
          this.excludedSet.push(elem37);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QGen_getQuestions_args.prototype.write = function(output) {
  output.writeStructBegin('QGen_getQuestions_args');
  if (this.n !== null && this.n !== undefined) {
    output.writeFieldBegin('n', Thrift.Type.I16, 1);
    output.writeI16(this.n);
    output.writeFieldEnd();
  }
  if (this.films !== null && this.films !== undefined) {
    output.writeFieldBegin('films', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.films.length);
    for (var iter38 in this.films)
    {
      if (this.films.hasOwnProperty(iter38))
      {
        iter38 = this.films[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.excludedSet !== null && this.excludedSet !== undefined) {
    output.writeFieldBegin('excludedSet', Thrift.Type.SET, 3);
    output.writeSetBegin(Thrift.Type.STRING, this.excludedSet.length);
    for (var iter39 in this.excludedSet)
    {
      if (this.excludedSet.hasOwnProperty(iter39))
      {
        iter39 = this.excludedSet[iter39];
        output.writeString(iter39);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QGen_getQuestions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
QGen_getQuestions_result.prototype = {};
QGen_getQuestions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.Question();
          elem46.read(input);
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QGen_getQuestions_result.prototype.write = function(output) {
  output.writeStructBegin('QGen_getQuestions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QGen_getRandomQuestions_args = function(args) {
  this.n = null;
  this.films = null;
  if (args) {
    if (args.n !== undefined) {
      this.n = args.n;
    }
    if (args.films !== undefined) {
      this.films = args.films;
    }
  }
};
QGen_getRandomQuestions_args.prototype = {};
QGen_getRandomQuestions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.n = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.films = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.Film();
          elem54.read(input);
          this.films.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QGen_getRandomQuestions_args.prototype.write = function(output) {
  output.writeStructBegin('QGen_getRandomQuestions_args');
  if (this.n !== null && this.n !== undefined) {
    output.writeFieldBegin('n', Thrift.Type.I16, 1);
    output.writeI16(this.n);
    output.writeFieldEnd();
  }
  if (this.films !== null && this.films !== undefined) {
    output.writeFieldBegin('films', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.films.length);
    for (var iter55 in this.films)
    {
      if (this.films.hasOwnProperty(iter55))
      {
        iter55 = this.films[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QGen_getRandomQuestions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
QGen_getRandomQuestions_result.prototype = {};
QGen_getRandomQuestions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.success = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.Question();
          elem62.read(input);
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QGen_getRandomQuestions_result.prototype.write = function(output) {
  output.writeStructBegin('QGen_getRandomQuestions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter63 in this.success)
    {
      if (this.success.hasOwnProperty(iter63))
      {
        iter63 = this.success[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QGenClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
QGenClient.prototype = {};
QGenClient.prototype.getPopularFilms = function(level, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getPopularFilms(level);
};

QGenClient.prototype.send_getPopularFilms = function(level) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPopularFilms', Thrift.MessageType.CALL, this.seqid);
  var args = new QGen_getPopularFilms_args();
  args.level = level;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QGenClient.prototype.recv_getPopularFilms = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QGen_getPopularFilms_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPopularFilms failed: unknown result');
};
QGenClient.prototype.getQuestions = function(n, films, excludedSet, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getQuestions(n, films, excludedSet);
};

QGenClient.prototype.send_getQuestions = function(n, films, excludedSet) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getQuestions', Thrift.MessageType.CALL, this.seqid);
  var args = new QGen_getQuestions_args();
  args.n = n;
  args.films = films;
  args.excludedSet = excludedSet;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QGenClient.prototype.recv_getQuestions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QGen_getQuestions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getQuestions failed: unknown result');
};
QGenClient.prototype.getRandomQuestions = function(n, films, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRandomQuestions(n, films);
};

QGenClient.prototype.send_getRandomQuestions = function(n, films) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRandomQuestions', Thrift.MessageType.CALL, this.seqid);
  var args = new QGen_getRandomQuestions_args();
  args.n = n;
  args.films = films;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

QGenClient.prototype.recv_getRandomQuestions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new QGen_getRandomQuestions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRandomQuestions failed: unknown result');
};
QGenProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
QGenProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

QGenProcessor.prototype.process_getPopularFilms = function(seqid, input, output) {
  var args = new QGen_getPopularFilms_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getPopularFilms(args.level, function (err, result) {
    var result = new QGen_getPopularFilms_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getPopularFilms", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

QGenProcessor.prototype.process_getQuestions = function(seqid, input, output) {
  var args = new QGen_getQuestions_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getQuestions(args.n, args.films, args.excludedSet, function (err, result) {
    var result = new QGen_getQuestions_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getQuestions", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

QGenProcessor.prototype.process_getRandomQuestions = function(seqid, input, output) {
  var args = new QGen_getRandomQuestions_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRandomQuestions(args.n, args.films, function (err, result) {
    var result = new QGen_getRandomQuestions_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRandomQuestions", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

